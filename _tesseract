#compdef tesseract
# zsh completions for tesseract 4.0
# Copyright Â© 2017 Henrik Lindgren
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

_tesseract() {

local -a arguments
local noargs context state line
local curcontext="$curcontext"

# contains commandline options already present in an associative array
typeset -A opt_args

# check and set commandline opts already present
(( $+opt_args[--tessdata-dir] )) && local TESSDATA_PREFIX=$opt_args[--tessdata-dir]

if [[ ! -d $TESSDATA_PREFIX/**/(/F)lang ]] ; then
  local TESSDATA_PREFIX
  if [[  -d "/usr/share/tesseract-ocr/[0-9].[0-9][0-9]" ]]; then
    TESSDATA_PREFIX="/usr/share/tesseract-ocr/[0-9].[0-9][0-9]"
  else
    [[ -d "/usr/share/tesseract-ocr" ]] || _message 'please set $TESSDATA_PREFIX!! for completion to work'
    TESSDATA_PREFIX="/usr/share/tesseract-ocr/4*"
  fi
fi


noargs="( --print-parameters --list-langs -v --help-psm --help-oem --help -h --version )"

_arguments -C '1:imagename:->input'\
  '2:outputbase:->output'\
  ':configfile:->config'\
  $noargs'--tessdata-dir[Specify the location of tessdata path]:tessdata path:{_path_files -/ }'\
  $noargs'--user-words[Location of user words file]:user words:->userwords'\
  $noargs'--user-patterns[Location of user patterns file]:user patterns:->userpatterns'\
  $noargs'-l[Specify language used for OCR]:language:->language'\
  $noargs'*-c[Set value for config variables]:config:->paramcomp'\
  $noargs'--psm[Specify page segmentation mode]:psm:((
    0\:Orientation\ and\ script\ detection\ OSD\ only\
    1\:Automatic\ page\ segmentation\ with\ OSD\
    2\:Automatic\ page\ segmentation,\ but\ no\ OSD,\ or\ OCR\
    3\:Fully\ automatic\ page\ segmentation,\ but\ no\ OSD\ Default\
    4\:Assume\ a\ single\ column\ of\ text\ of\ variable\ sizes\
    5\:Assume\ a\ single\ uniform\ block\ of\ vertically\ aligned\ text\
    6\:Assume\ a\ single\ uniform\ block\ of\ text\
    7\:Treat\ the\ image\ as\ a\ single\ text\ line\
    8\:Treat\ the\ image\ as\ a\ single\ word\
    9\:Treat\ the\ image\ as\ a\ single\ word\ in\ a\ circle\
    10\:Treat\ the\ image\ as\ a\ single\ character\
    11\:Sparse\ text.\ Find\ as\ much\ text\ as\ possible\ in\ no\ particular\ order\
    12\:Sparse\ text\ with\ OSD\
    13\:Raw\ line.\ Treat\ the\ image\ as\ a\ single\ text\ line,\ bypassing\ hacks\ that\ are\ Tesseract-specific\
  ))'\
  $noargs'--oem[Specify OCR Engine mode]:oem:((
    0\:Original\ Tesseract\ only\
    1\:Neural\ nets\ LSTM\ only\
    2\:Tesseract\ +\ LSTM\
    3\:Default\ based\ on\ what\ is\ available\
  ))'\
  '(- 1 :)'{-h,--help}'[Show this help message]'\
  '(- 1 :)--help-psm[Show page segmentation modes]'\
  '(- 1 :)--help-oem[Show OCR modes]'\
  '(- 1 :)'{-v,--version}'[Show version information]'\
  '(- 1 :)--list-langs[List available languages for tesseract engine]:tessdata path:(( --tessdata-dir\:tessdata\ dir ))'\
  '(- 1 :)--print-parameters[Print tesseract parameters to stdout]' && return 0

case "$state" in
    userwords)
        _alternative ":user words:_files $TESSDATA_PREFIX/**/???.user-words"\
            ':files:_files'
        return 0
        ;;
    userpatterns)
        _alternative ":user patterns:_files $TESSDATA_PREFIX/**/???.user-patterns"\
            ':current files:_files -g ???.user-patterns'
        return 0
        ;;
    input)
        _alternative ':imagename listname stdin:(( stdin\:"read data from stdin" ))'\
          ':imagename listname stdin:_files' && return 0
        # _files
        return 0
        ;;
    output)
        _alternative ':output basename:(( stdout\:"write data to stdout" ))'\
          ':output basename:_files' && return 0
          # _files
          return 0
        ;;
    config)
        local -a configfile
        local curcontext="$curcontext"
        configfile=(
              'hocr:Output in hOCR format'
              'pdf:If inovked with \[-psm 3\] outputs image and a separate searchable text layer with the recognized text underneath'
              'tsv:Output in tsv format'
            )
            _alternative ':configfile:{ _describe -V "conffiles" configfile }'\
                ":configfile:{_files -W $TESSDATA_PREFIX/tessdata/**configs }"
            return 0
        ;;
    language)
        local curcontext="$curcontext"
        local -a lang
        lang=( $( tesseract --list-langs 2> /dev/null | sed '1d') )
        _values -s + 'flags' $lang
        return 0
        ;;
    psmcomp)
        local curcontext="$curcontext"
        local -a psm
        psm=(
            '0:Orientation and script detection OSD only'
            '1:Automatic page segmentation with OSD'
            '2:Automatic page segmentation, but no OSD, or OCR'
            '3:Fully automatic page segmentation, but no OSD Default'
            '4:Assume a single column of text of variable sizes'
            '5:Assume a single uniform block of vertically aligned text'
            '6:Assume a single uniform block of text'
            '7:Treat the image as a single text line'
            '8:Treat the image as a single word'
            '9:Treat the image as a single word in a circle'
            '10:Treat the image as a single character'
            '11:Sparse text. Find as much text as possible in no particular order'
            '12:Sparse text with OSD'
            '13:Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific'
        )
        _describe -V 'page segmentation mode' psm
        ;;
    oemcomp)
        local curcontext="$curcontext"
        local -a oem
        oem=(
         '0:Original Tesseract only'
         '1:Neural nets LSTM only'
         '2:Tesseract + LSTM'
         '3:Default based on what is available'
          )
          _describe 'OCR mode' oem
          return 0
        ;;
    paramcomp)
        local -a parame
        parame=( ${(fq)"$(tesseract --print-parameters 2>/dev/null | awk -F'\t' 'NR>1 && /[^:]/ {print $1"="$2":"$3}')"} )
        _describe 'parameters' parame
      return 0
    ;;

esac
}

_tesseract "$@"
return 0
#  vim: set ts=2 sw=2 tw=0 expandtab foldenable foldmethod=syntax foldclose=all :
